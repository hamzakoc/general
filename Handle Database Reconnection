3. Handle Database Reconnection
When the token expires, youâ€™ll need to force Laravel to reconnect to the database using the new token. Add a mechanism to reconnect automatically if the token is refreshed.

Example Middleware for Database Reconnection:
Create middleware to handle reconnections.

Generate Middleware:

bash
Copy code
php artisan make:middleware RefreshDatabaseConnection
Middleware Code: Add the following logic in app/Http/Middleware/RefreshDatabaseConnection.php:

php
Copy code
namespace App\Http\Middleware;

use Closure;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Config;

class RefreshDatabaseConnection
{
    public function handle($request, Closure $next)
    {
        try {
            // Attempt to connect to the database
            DB::connection()->getPdo();
        } catch (\Exception $e) {
            // Token might have expired; refresh the token
            $newToken = getAccessToken(); // Fetch a new token
            Config::set('database.connections.mysql.password', $newToken);

            // Purge and reconnect
            DB::purge('mysql');
            DB::reconnect('mysql');
        }

        return $next($request);
    }
}
Register Middleware: Add the middleware to your application in app/Http/Kernel.php:

php
Copy code
protected $middleware = [
    // Other middleware
    \App\Http\Middleware\RefreshDatabaseConnection::class,
];
4. Automate Token Refresh with a Scheduler
Set up a Laravel scheduler to refresh the token periodically.

Example:
In app/Console/Kernel.php, add:

php
Copy code
protected function schedule(Schedule $schedule)
{
    $schedule->call(function () {
        $newToken = getAccessToken(); // Fetch and cache the token
    })->hourly(); // Adjust based on your token expiry time
}
How This Solves Your Problem
Dynamic Password: The getAccessToken() function dynamically fetches and caches the token, so your app always has a valid password without modifying the config.php.

Automatic Reconnection: Middleware ensures that the app reconnects to the database with the new token if the old one expires.

No Restart Required: The app refreshes tokens and reconnects dynamically without requiring a pod restart.
